[
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "get_driver",
        "importPath": "features.helpers.driver",
        "description": "features.helpers.driver",
        "isExtraImport": true,
        "detail": "features.helpers.driver",
        "documentation": {}
    },
    {
        "label": "set_driver",
        "importPath": "features.helpers.driver",
        "description": "features.helpers.driver",
        "isExtraImport": true,
        "detail": "features.helpers.driver",
        "documentation": {}
    },
    {
        "label": "get_driver",
        "importPath": "features.helpers.driver",
        "description": "features.helpers.driver",
        "isExtraImport": true,
        "detail": "features.helpers.driver",
        "documentation": {}
    },
    {
        "label": "finalizar_driver",
        "importPath": "features.helpers.driver",
        "description": "features.helpers.driver",
        "isExtraImport": true,
        "detail": "features.helpers.driver",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "features.pages.base_page",
        "description": "features.pages.base_page",
        "isExtraImport": true,
        "detail": "features.pages.base_page",
        "documentation": {}
    },
    {
        "label": "get_driver",
        "importPath": "features.pages.base_page",
        "description": "features.pages.base_page",
        "isExtraImport": true,
        "detail": "features.pages.base_page",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "features.pages.base_page",
        "description": "features.pages.base_page",
        "isExtraImport": true,
        "detail": "features.pages.base_page",
        "documentation": {}
    },
    {
        "label": "acessar_site",
        "importPath": "features.pages.base_page",
        "description": "features.pages.base_page",
        "isExtraImport": true,
        "detail": "features.pages.base_page",
        "documentation": {}
    },
    {
        "label": "acessar_site",
        "importPath": "features.pages.base_page",
        "description": "features.pages.base_page",
        "isExtraImport": true,
        "detail": "features.pages.base_page",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "given",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "when",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "then",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "features.pages.teste_link_quebrado",
        "description": "features.pages.teste_link_quebrado",
        "isExtraImport": true,
        "detail": "features.pages.teste_link_quebrado",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "features.pages.teste_login_invalido",
        "description": "features.pages.teste_login_invalido",
        "isExtraImport": true,
        "detail": "features.pages.teste_login_invalido",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "features.pages.termo_invalido",
        "description": "features.pages.termo_invalido",
        "isExtraImport": true,
        "detail": "features.pages.termo_invalido",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "Status",
        "importPath": "behave.model_core",
        "description": "behave.model_core",
        "isExtraImport": true,
        "detail": "behave.model_core",
        "documentation": {}
    },
    {
        "label": "get_driver",
        "kind": 2,
        "importPath": "features.helpers.driver",
        "description": "features.helpers.driver",
        "peekOfCode": "def get_driver():\n    global _driver\n    if _driver is None:\n        raise RuntimeError(\"Driver não foi inicializado. Use set_driver() primeiro.\")\n    return _driver\ndef set_driver(driver):\n    global _driver\n    _driver = driver\ndef finalizar_driver():\n    global _driver",
        "detail": "features.helpers.driver",
        "documentation": {}
    },
    {
        "label": "set_driver",
        "kind": 2,
        "importPath": "features.helpers.driver",
        "description": "features.helpers.driver",
        "peekOfCode": "def set_driver(driver):\n    global _driver\n    _driver = driver\ndef finalizar_driver():\n    global _driver\n    if _driver is not None:\n        _driver.quit()\n        _driver = None",
        "detail": "features.helpers.driver",
        "documentation": {}
    },
    {
        "label": "finalizar_driver",
        "kind": 2,
        "importPath": "features.helpers.driver",
        "description": "features.helpers.driver",
        "peekOfCode": "def finalizar_driver():\n    global _driver\n    if _driver is not None:\n        _driver.quit()\n        _driver = None",
        "detail": "features.helpers.driver",
        "documentation": {}
    },
    {
        "label": "_driver",
        "kind": 5,
        "importPath": "features.helpers.driver",
        "description": "features.helpers.driver",
        "peekOfCode": "_driver = None\ndef get_driver():\n    global _driver\n    if _driver is None:\n        raise RuntimeError(\"Driver não foi inicializado. Use set_driver() primeiro.\")\n    return _driver\ndef set_driver(driver):\n    global _driver\n    _driver = driver\ndef finalizar_driver():",
        "detail": "features.helpers.driver",
        "documentation": {}
    },
    {
        "label": "find_element",
        "kind": 2,
        "importPath": "features.pages.base_page",
        "description": "features.pages.base_page",
        "peekOfCode": "def find_element(locator):\n    return get_driver().find_element(By.CSS_SELECTOR, locator)\ndef get_element_text(locator):\n    return find_element(locator).text\ndef wait_for_element(locator, timeout=10):\n    return WebDriverWait(get_driver(), timeout).until\n    EC.presence_of_element_located((By.CSS_SELECTOR, locator))\ndef acessar_site():\n    get_driver().get(\"https://automationteststore.com/\")\n    time.sleep(3)",
        "detail": "features.pages.base_page",
        "documentation": {}
    },
    {
        "label": "get_element_text",
        "kind": 2,
        "importPath": "features.pages.base_page",
        "description": "features.pages.base_page",
        "peekOfCode": "def get_element_text(locator):\n    return find_element(locator).text\ndef wait_for_element(locator, timeout=10):\n    return WebDriverWait(get_driver(), timeout).until\n    EC.presence_of_element_located((By.CSS_SELECTOR, locator))\ndef acessar_site():\n    get_driver().get(\"https://automationteststore.com/\")\n    time.sleep(3)",
        "detail": "features.pages.base_page",
        "documentation": {}
    },
    {
        "label": "wait_for_element",
        "kind": 2,
        "importPath": "features.pages.base_page",
        "description": "features.pages.base_page",
        "peekOfCode": "def wait_for_element(locator, timeout=10):\n    return WebDriverWait(get_driver(), timeout).until\n    EC.presence_of_element_located((By.CSS_SELECTOR, locator))\ndef acessar_site():\n    get_driver().get(\"https://automationteststore.com/\")\n    time.sleep(3)",
        "detail": "features.pages.base_page",
        "documentation": {}
    },
    {
        "label": "acessar_site",
        "kind": 2,
        "importPath": "features.pages.base_page",
        "description": "features.pages.base_page",
        "peekOfCode": "def acessar_site():\n    get_driver().get(\"https://automationteststore.com/\")\n    time.sleep(3)",
        "detail": "features.pages.base_page",
        "documentation": {}
    },
    {
        "label": "pesquisar_termo",
        "kind": 2,
        "importPath": "features.pages.termo_invalido",
        "description": "features.pages.termo_invalido",
        "peekOfCode": "def pesquisar_termo(termo):\n    find_element(CAMPO_PESQUISA).send_keys(termo)\n    find_element(BOTAO_PESQUISA).click()\ndef verificar_mensagem():\n    return get_element_text(MENSAGEM_NENHUM_RESULTADO)",
        "detail": "features.pages.termo_invalido",
        "documentation": {}
    },
    {
        "label": "verificar_mensagem",
        "kind": 2,
        "importPath": "features.pages.termo_invalido",
        "description": "features.pages.termo_invalido",
        "peekOfCode": "def verificar_mensagem():\n    return get_element_text(MENSAGEM_NENHUM_RESULTADO)",
        "detail": "features.pages.termo_invalido",
        "documentation": {}
    },
    {
        "label": "CAMPO_PESQUISA",
        "kind": 5,
        "importPath": "features.pages.termo_invalido",
        "description": "features.pages.termo_invalido",
        "peekOfCode": "CAMPO_PESQUISA = \"#filter_keyword\"\nBOTAO_PESQUISA = \".button-in-search\"\nMENSAGEM_NENHUM_RESULTADO = \".contentpanel\"\ndef pesquisar_termo(termo):\n    find_element(CAMPO_PESQUISA).send_keys(termo)\n    find_element(BOTAO_PESQUISA).click()\ndef verificar_mensagem():\n    return get_element_text(MENSAGEM_NENHUM_RESULTADO)",
        "detail": "features.pages.termo_invalido",
        "documentation": {}
    },
    {
        "label": "BOTAO_PESQUISA",
        "kind": 5,
        "importPath": "features.pages.termo_invalido",
        "description": "features.pages.termo_invalido",
        "peekOfCode": "BOTAO_PESQUISA = \".button-in-search\"\nMENSAGEM_NENHUM_RESULTADO = \".contentpanel\"\ndef pesquisar_termo(termo):\n    find_element(CAMPO_PESQUISA).send_keys(termo)\n    find_element(BOTAO_PESQUISA).click()\ndef verificar_mensagem():\n    return get_element_text(MENSAGEM_NENHUM_RESULTADO)",
        "detail": "features.pages.termo_invalido",
        "documentation": {}
    },
    {
        "label": "MENSAGEM_NENHUM_RESULTADO",
        "kind": 5,
        "importPath": "features.pages.termo_invalido",
        "description": "features.pages.termo_invalido",
        "peekOfCode": "MENSAGEM_NENHUM_RESULTADO = \".contentpanel\"\ndef pesquisar_termo(termo):\n    find_element(CAMPO_PESQUISA).send_keys(termo)\n    find_element(BOTAO_PESQUISA).click()\ndef verificar_mensagem():\n    return get_element_text(MENSAGEM_NENHUM_RESULTADO)",
        "detail": "features.pages.termo_invalido",
        "documentation": {}
    },
    {
        "label": "get_all_links",
        "kind": 2,
        "importPath": "features.pages.teste_link_quebrado",
        "description": "features.pages.teste_link_quebrado",
        "peekOfCode": "def get_all_links():\n    return get_driver().find_elements(By.CSS_SELECTOR, LINK_FOOTER)\ndef verificar_status_link(url):\n    try:\n        response = requests.head(url, allow_redirects=True, timeout=5)\n        return response.status_code\n    except Exception as e:\n        print(f\"Erro ao verificar {url}: {e}\")\n        return 404",
        "detail": "features.pages.teste_link_quebrado",
        "documentation": {}
    },
    {
        "label": "verificar_status_link",
        "kind": 2,
        "importPath": "features.pages.teste_link_quebrado",
        "description": "features.pages.teste_link_quebrado",
        "peekOfCode": "def verificar_status_link(url):\n    try:\n        response = requests.head(url, allow_redirects=True, timeout=5)\n        return response.status_code\n    except Exception as e:\n        print(f\"Erro ao verificar {url}: {e}\")\n        return 404",
        "detail": "features.pages.teste_link_quebrado",
        "documentation": {}
    },
    {
        "label": "LINK_FOOTER",
        "kind": 5,
        "importPath": "features.pages.teste_link_quebrado",
        "description": "features.pages.teste_link_quebrado",
        "peekOfCode": "LINK_FOOTER = \"#footer a\"\ndef get_all_links():\n    return get_driver().find_elements(By.CSS_SELECTOR, LINK_FOOTER)\ndef verificar_status_link(url):\n    try:\n        response = requests.head(url, allow_redirects=True, timeout=5)\n        return response.status_code\n    except Exception as e:\n        print(f\"Erro ao verificar {url}: {e}\")\n        return 404",
        "detail": "features.pages.teste_link_quebrado",
        "documentation": {}
    },
    {
        "label": "preencher_credenciais_invalidas",
        "kind": 2,
        "importPath": "features.pages.teste_login_invalido",
        "description": "features.pages.teste_login_invalido",
        "peekOfCode": "def preencher_credenciais_invalidas(usuario, senha):\n    find_element(CAMPO_LOGIN).send_keys(usuario)\n    find_element(CAMPO_SENHA).send_keys(senha)\ndef clicar_botao_login():\n    find_element(BOTAO_LOGIN).click()\ndef verificar_mensagem_erro():\n    return get_element_text(MENSAGEM_ERRO)",
        "detail": "features.pages.teste_login_invalido",
        "documentation": {}
    },
    {
        "label": "clicar_botao_login",
        "kind": 2,
        "importPath": "features.pages.teste_login_invalido",
        "description": "features.pages.teste_login_invalido",
        "peekOfCode": "def clicar_botao_login():\n    find_element(BOTAO_LOGIN).click()\ndef verificar_mensagem_erro():\n    return get_element_text(MENSAGEM_ERRO)",
        "detail": "features.pages.teste_login_invalido",
        "documentation": {}
    },
    {
        "label": "verificar_mensagem_erro",
        "kind": 2,
        "importPath": "features.pages.teste_login_invalido",
        "description": "features.pages.teste_login_invalido",
        "peekOfCode": "def verificar_mensagem_erro():\n    return get_element_text(MENSAGEM_ERRO)",
        "detail": "features.pages.teste_login_invalido",
        "documentation": {}
    },
    {
        "label": "CAMPO_LOGIN",
        "kind": 5,
        "importPath": "features.pages.teste_login_invalido",
        "description": "features.pages.teste_login_invalido",
        "peekOfCode": "CAMPO_LOGIN = \"#loginFrm_loginname\"\nCAMPO_SENHA = \"#loginFrm_password\"\nBOTAO_LOGIN = \"button[title='Login']\"\nMENSAGEM_ERRO = \".alert-danger\"\ndef preencher_credenciais_invalidas(usuario, senha):\n    find_element(CAMPO_LOGIN).send_keys(usuario)\n    find_element(CAMPO_SENHA).send_keys(senha)\ndef clicar_botao_login():\n    find_element(BOTAO_LOGIN).click()\ndef verificar_mensagem_erro():",
        "detail": "features.pages.teste_login_invalido",
        "documentation": {}
    },
    {
        "label": "CAMPO_SENHA",
        "kind": 5,
        "importPath": "features.pages.teste_login_invalido",
        "description": "features.pages.teste_login_invalido",
        "peekOfCode": "CAMPO_SENHA = \"#loginFrm_password\"\nBOTAO_LOGIN = \"button[title='Login']\"\nMENSAGEM_ERRO = \".alert-danger\"\ndef preencher_credenciais_invalidas(usuario, senha):\n    find_element(CAMPO_LOGIN).send_keys(usuario)\n    find_element(CAMPO_SENHA).send_keys(senha)\ndef clicar_botao_login():\n    find_element(BOTAO_LOGIN).click()\ndef verificar_mensagem_erro():\n    return get_element_text(MENSAGEM_ERRO)",
        "detail": "features.pages.teste_login_invalido",
        "documentation": {}
    },
    {
        "label": "BOTAO_LOGIN",
        "kind": 5,
        "importPath": "features.pages.teste_login_invalido",
        "description": "features.pages.teste_login_invalido",
        "peekOfCode": "BOTAO_LOGIN = \"button[title='Login']\"\nMENSAGEM_ERRO = \".alert-danger\"\ndef preencher_credenciais_invalidas(usuario, senha):\n    find_element(CAMPO_LOGIN).send_keys(usuario)\n    find_element(CAMPO_SENHA).send_keys(senha)\ndef clicar_botao_login():\n    find_element(BOTAO_LOGIN).click()\ndef verificar_mensagem_erro():\n    return get_element_text(MENSAGEM_ERRO)",
        "detail": "features.pages.teste_login_invalido",
        "documentation": {}
    },
    {
        "label": "MENSAGEM_ERRO",
        "kind": 5,
        "importPath": "features.pages.teste_login_invalido",
        "description": "features.pages.teste_login_invalido",
        "peekOfCode": "MENSAGEM_ERRO = \".alert-danger\"\ndef preencher_credenciais_invalidas(usuario, senha):\n    find_element(CAMPO_LOGIN).send_keys(usuario)\n    find_element(CAMPO_SENHA).send_keys(senha)\ndef clicar_botao_login():\n    find_element(BOTAO_LOGIN).click()\ndef verificar_mensagem_erro():\n    return get_element_text(MENSAGEM_ERRO)",
        "detail": "features.pages.teste_login_invalido",
        "documentation": {}
    },
    {
        "label": "step_impl",
        "kind": 2,
        "importPath": "features.steps.common_steps",
        "description": "features.steps.common_steps",
        "peekOfCode": "def step_impl(context):\n    acessar_site()",
        "detail": "features.steps.common_steps",
        "documentation": {}
    },
    {
        "label": "step_impl",
        "kind": 2,
        "importPath": "features.steps.link_quebrado_steps",
        "description": "features.steps.link_quebrado_steps",
        "peekOfCode": "def step_impl(context):\n    context.links = get_all_links()\n@then('nenhum link deve estar quebrado')\ndef step_impl(context):\n    broken_links = []\n    for link in context.links:\n        url = link.get_attribute('href')\n        if url and url.startswith('http'):\n            status = verificar_status_link(url)\n            print(f\"Verificando {url} - Status: {status}\")",
        "detail": "features.steps.link_quebrado_steps",
        "documentation": {}
    },
    {
        "label": "step_impl",
        "kind": 2,
        "importPath": "features.steps.link_quebrado_steps",
        "description": "features.steps.link_quebrado_steps",
        "peekOfCode": "def step_impl(context):\n    broken_links = []\n    for link in context.links:\n        url = link.get_attribute('href')\n        if url and url.startswith('http'):\n            status = verificar_status_link(url)\n            print(f\"Verificando {url} - Status: {status}\")\n            if status == 404:\n                broken_links.append(url)\n    assert len(broken_links) == 0, f\"Links quebrados encontrados: {broken_links}\"",
        "detail": "features.steps.link_quebrado_steps",
        "documentation": {}
    },
    {
        "label": "step_impl",
        "kind": 2,
        "importPath": "features.steps.login_invalido_steps",
        "description": "features.steps.login_invalido_steps",
        "peekOfCode": "def step_impl(context):\n    acessar_site()\n    find_element(\"a[href*='account/login']\").click()\n@when('preencho com usuário \"{usuario}\" e senha \"{senha}\"')\ndef step_impl(context, usuario, senha):\n    preencher_credenciais_invalidas(usuario, senha)\n@when('clico no botão de login')\ndef step_impl(context):\n    clicar_botao_login()\n@then('devo ver a mensagem de erro \"{mensagem}\"')",
        "detail": "features.steps.login_invalido_steps",
        "documentation": {}
    },
    {
        "label": "step_impl",
        "kind": 2,
        "importPath": "features.steps.login_invalido_steps",
        "description": "features.steps.login_invalido_steps",
        "peekOfCode": "def step_impl(context, usuario, senha):\n    preencher_credenciais_invalidas(usuario, senha)\n@when('clico no botão de login')\ndef step_impl(context):\n    clicar_botao_login()\n@then('devo ver a mensagem de erro \"{mensagem}\"')\ndef step_impl(context, mensagem):\n    assert mensagem in verificar_mensagem_erro()",
        "detail": "features.steps.login_invalido_steps",
        "documentation": {}
    },
    {
        "label": "step_impl",
        "kind": 2,
        "importPath": "features.steps.login_invalido_steps",
        "description": "features.steps.login_invalido_steps",
        "peekOfCode": "def step_impl(context):\n    clicar_botao_login()\n@then('devo ver a mensagem de erro \"{mensagem}\"')\ndef step_impl(context, mensagem):\n    assert mensagem in verificar_mensagem_erro()",
        "detail": "features.steps.login_invalido_steps",
        "documentation": {}
    },
    {
        "label": "step_impl",
        "kind": 2,
        "importPath": "features.steps.login_invalido_steps",
        "description": "features.steps.login_invalido_steps",
        "peekOfCode": "def step_impl(context, mensagem):\n    assert mensagem in verificar_mensagem_erro()",
        "detail": "features.steps.login_invalido_steps",
        "documentation": {}
    },
    {
        "label": "step_impl",
        "kind": 2,
        "importPath": "features.steps.termo_invalido_steps",
        "description": "features.steps.termo_invalido_steps",
        "peekOfCode": "def step_impl(context, termo):\n    pesquisar_termo(termo)\n@then('devo ver a mensagem \"{mensagem}\"')\ndef step_impl(context, mensagem):\n    assert mensagem in verificar_mensagem()",
        "detail": "features.steps.termo_invalido_steps",
        "documentation": {}
    },
    {
        "label": "step_impl",
        "kind": 2,
        "importPath": "features.steps.termo_invalido_steps",
        "description": "features.steps.termo_invalido_steps",
        "peekOfCode": "def step_impl(context, mensagem):\n    assert mensagem in verificar_mensagem()",
        "detail": "features.steps.termo_invalido_steps",
        "documentation": {}
    },
    {
        "label": "before_scenario",
        "kind": 2,
        "importPath": "features.environment",
        "description": "features.environment",
        "peekOfCode": "def before_scenario(context, scenario):\n    service = Service(ChromeDriverManager().install())\n    options = webdriver.ChromeOptions()\n    options.add_argument(\"--start-maximized\")\n    driver = webdriver.Chrome(service=service, options=options)\n    driver.implicitly_wait(10)\n    set_driver(driver)\ndef after_scenario(context, scenario):\n    driver = get_driver()\n    if scenario.status == Status.failed:",
        "detail": "features.environment",
        "documentation": {}
    },
    {
        "label": "after_scenario",
        "kind": 2,
        "importPath": "features.environment",
        "description": "features.environment",
        "peekOfCode": "def after_scenario(context, scenario):\n    driver = get_driver()\n    if scenario.status == Status.failed:\n        screenshot_dir = \"screenshots\"\n        os.makedirs(screenshot_dir, exist_ok=True)\n        screenshot_path = os.path.join(screenshot_dir, f\"{scenario.name.replace(' ', '_')}.png\")\n        driver.save_screenshot(screenshot_path)\n    finalizar_driver()",
        "detail": "features.environment",
        "documentation": {}
    }
]